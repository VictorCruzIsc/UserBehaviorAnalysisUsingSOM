working_directory <- "./Documents/git/UserBehaviorAnalysisUsingSOM/R"
training_elements_subset <- 10000
build_dataset_file <- "./chunks/1.4.txt"
train_dataset_file <- "./chunks/2.4.txt"
train_dataset_file <- "./chunks/2.4.txt"
train_dataset_file <- "./chunks/2.4.txt"
train_dataset_file <- "./chunks/2.4.txt"
train_dataset_file <- "./chunks/2.4.txt"
working_directory <- "./Documents/git/UserBehaviorAnalysisUsingSOM/R"
training_elements_subset <- 10000
build_dataset_file <- "./chunks/1.4.txt"
train_dataset_file <- "./chunks/2.4.txt"
neurons_in_lattice <- 50
epochs <- 10
learning_rate <- c(0.05, 0.01)
neighbourhood <- "circular"
lattice_topography <- "rectangular"
setwd(working_directory)
getwd()
build_dataset <- read.table(build_dataset_file)
complete_train_dataset <- read.table(train_dataset_file)
total_elements_train_dataset <- length(complete_train_dataset[,1])
train_dataset <- complete_train_dataset
if(total_elements_train_dataset > training_elements_subset){
# subset is needed
train_samples <- sample(total_elements_train_dataset, training_elements_subset, replace = FALSE)
# length(train_samples)
train_dataset<-train_dataset[train_samples,]
}
input_vectors_matrix <- as.matrix(scale(train_dataset))
build_vectors_matrix <- as.matrix(scale(build_dataset))
som_grid <- somgrid(xdim = neurons_in_lattice, ydim = neurons_in_lattice, topo=lattice_topography)
som_model <- som(input_vectors_matrix,
som_grid,
rlen=epochs,
alpha=learning_rate,
build_vectors_matrix,
keep.data=TRUE)
working_directory <- "./Documents/git/UserBehaviorAnalysisUsingSOM/R"
training_elements_subset <- 10000
build_dataset_file <- "./chunks/1.4.txt"
train_dataset_file <- "./chunks/2.4.txt"
neurons_in_lattice <- 50
epochs <- 10
learning_rate <- c(0.05, 0.01)
neighbourhood <- "circular"
lattice_topography <- "rectangular"
setwd(working_directory)
getwd()
build_dataset <- read.table(build_dataset_file)
complete_train_dataset <- read.table(train_dataset_file)
total_elements_train_dataset <- length(complete_train_dataset[,1])
train_dataset <- complete_train_dataset
if(total_elements_train_dataset > training_elements_subset){
# subset is needed
train_samples <- sample(total_elements_train_dataset, training_elements_subset, replace = FALSE)
# length(train_samples)
train_dataset<-train_dataset[train_samples,]
}
require(kohonen)
input_vectors_matrix <- as.matrix(scale(train_dataset))
build_vectors_matrix <- as.matrix(scale(build_dataset))
som_grid <- somgrid(xdim = neurons_in_lattice, ydim = neurons_in_lattice, topo=lattice_topography)
som_model <- som(input_vectors_matrix,
som_grid,
rlen=epochs,
alpha=learning_rate,
build_vectors_matrix,
keep.data=TRUE)
working_directory <- "./Documents/git/UserBehaviorAnalysisUsingSOM/R"
training_elements_subset <- 100000
build_dataset_file <- "./chunks/1.4.txt"
train_dataset_file <- "./chunks/2.4.txt"
neurons_in_lattice <- 50
epochs <- 10
learning_rate <- c(0.05, 0.01)
neighbourhood <- "circular"
lattice_topography <- "rectangular"
setwd(working_directory)
getwd()
build_dataset <- read.table(build_dataset_file)
complete_train_dataset <- read.table(train_dataset_file)
total_elements_train_dataset <- length(complete_train_dataset[,1])
train_dataset <- complete_train_dataset
if(total_elements_train_dataset > training_elements_subset){
# subset is needed
train_samples <- sample(total_elements_train_dataset, training_elements_subset, replace = FALSE)
# length(train_samples)
train_dataset<-train_dataset[train_samples,]
}
require(kohonen)
input_vectors_matrix <- as.matrix(scale(train_dataset))
build_vectors_matrix <- as.matrix(scale(build_dataset))
som_grid <- somgrid(xdim = neurons_in_lattice, ydim = neurons_in_lattice, topo=lattice_topography)
som_model <- som(input_vectors_matrix,
som_grid,
rlen=epochs,
alpha=learning_rate,
build_vectors_matrix,
keep.data=TRUE)
epochs <- 15
som_model <- som(input_vectors_matrix,
som_grid,
rlen=epochs,
alpha=learning_rate,
build_vectors_matrix,
keep.data=TRUE)
epochs <- 20
som_model <- som(input_vectors_matrix,
som_grid,
rlen=epochs,
alpha=learning_rate,
build_vectors_matrix,
keep.data=TRUE)
epochs <- 30
som_model <- som(input_vectors_matrix,
som_grid,
rlen=epochs,
alpha=learning_rate,
build_vectors_matrix,
keep.data=TRUE)
epochs <- 10
som_model <- som(input_vectors_matrix,
som_grid,
rlen=epochs,
alpha=learning_rate,
build_vectors_matrix,
keep.data=TRUE)
plot(som_model, type="changes")
